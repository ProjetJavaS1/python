from math import floor
import numpy as np


# compression

M = np.array( [ [4,2,3,1,1,3,4,8], [4,9,5,1,1,3 ,4,8], [4,5,4,3,1,3 ,4,8] , [4,2,3,1,1,3 ,4,8], [4,9,6,1,1,3 ,4,8], [4,5,4,1,1,3 ,4,8],[4,9,6,1,1,3 ,4,8], [4,5,4,1,1,3 ,4,8] ] ) 

Q = np.array( [ [16,11,10,16,24,40,51,61], [12,12,13,19,26,58,60,55],[14,13,16,24,40,57,69,56],[14,17,22,29,51,87,80,62],[18,22,37,56,68,109,103,77],[24,35,55,64,81,104,113,92],[49,64,78,87,103,121,120,101],[72,92,95,98,112,100,103,99] ] )

P= np.zeros((8,8))
for i in range(8):
    P[0][i]=1/np.sqrt(2)

for i in range(8):
    for j in range(7):
        P[j+1][i]=np.cos((2*i+1)*(j+1)*np.pi/16)

P=P/2    


def compression(P,M) : 

# on applique le changement de base blocs par blocs (8x8)
# le changement de base s'écrit D= PMPT avec M la matrice associée à l'image et P la matrice de changement de base
# on construit la transposée de P
    PT= np.transpose(P)

    # dot pour le produit matricielle
    D1= np.dot(P,M)
    D2= np.dot(D1,PT)

# on applique la matrice de quantification terme à terme
# et on prend la partie entière grâce à floor

    RES = np.floor_divide(D2,Q)
    return RES

T= np.array(compression(P,M))
print(T)


def debruiter(M):

    for i in range(8):
        for j in range(8):
            if i+j>=3:
                M[i][j]=0
           
    return M

T1=np.array(debruiter(T))

#on compte le nombre de coefficient non nuls

totalFin = np.count_nonzero(T1)

# taux de compression en pourcentage

totalIni = len(T1)*len(T1)

tauxCompression= ((totalIni-totalFin)/ totalIni) *100
print(tauxCompression,"%") 

# décompression

def decompression (P,M):
    
    PT= np.transpose(P)
    
    L= M*Q 
    # on obtient D~
    
    RES= np.dot(PT,L)
    RES1 = np.dot(RES,P)
    
    return (RES1)

print("           ")
print ( decompression(P,T1) )
print (" et M ")
print(M)
